plot(df$Date, df$Theory_Savings)
plot(df$Date, df$Theory_Savings) + abline()
plot(df$Date, df$Theory_Savings) + abline()
plot(df$Date, df$Theory_Savings)
abline
plot(df$Date, df$Theory_Savings)
abline()
library(ggplot2)
ggplot(df, aes(Date, Theory_Savings)) + geom_point()
ggplot(df, aes(Date, Theory_Savings)) + geom_point() + geom_smooth()
ggplot(df, aes(Date, Theory_Savings)) + geom_point() + geom_smooth(method = "lm")
# Line Plot
# Using simulated data
library(dplyr)
library(ggplot2)
library(lubridate)
# setwd("C:/Users/Zachary.Palmore/GitHub/Home/home_afford_app")
source("helper.R")
setwd("C:/Users/Zachary.Palmore/GitHub/Home/home_afford_app")
# The original data inputs:
# savings <- monthly_savings(input$monthly_income, input$expenses)
# # create df from init_savings, savings, start_date, and end_date
# df <- create_savingsdf(init_savings = input$init_savings,
#                        savings,
#                        start_date = input$dates[1],
#                        end_date = input$dates[2])
# Recreate monthly savings given some number
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2025-12-31")
monthly_income <-  3000
monthly_expenses <- 1500
current_savings <- 10000
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
calculate_savings(current_savings, savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
df$Points <- rnorm(length(df$Savings), mean = monthly_income - monthly_expenses, sd = 3000) # Insert realistic standard deviation
df <- df %>% mutate(Theory_Savings = cumsum(Points))
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format()) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date)
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2025-12-31")
goal_purchase_date <- as.Date("2024-06-01")
monthly_income <-  3000
monthly_expenses <- 1500
current_savings <- 10000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
calculate_savings(current_savings, savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
df$Points <- rnorm(length(df$Savings), mean = monthly_income - monthly_expenses, sd = 3000) # Insert realistic standard deviation
df <- df %>% mutate(Theory_Savings = cumsum(Points))
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format()) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date)
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format()) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
theme_minimal()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format()) +
theme_minimal()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format()) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y",
breaks = c("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y",
breaks = c("2024-01-01", "2022-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y",
date_breaks = c("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
?scale_x_date()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", limits = "2024-01-01") +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", limits = as.Date("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = as.Date("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", date_breaks = as.Date("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = as.Date("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Scenarios
# in each scenario we want to change the amount of savings that gets accrued starting at a given time
# inputs: start time of new job, new monthly income, new monthly expenses?
new_date <- as.Date("2022-11-01")
new_monthly_income <- 3000
new_monthly_expenses <- 500
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ as.numeric(cumsum(rnorm(length(Savings),
mean = new_monthly_income - new_monthly_expenses,
sd = 500)))
))
new_monthly_income <- 3000
new_monthly_expenses <- 500
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ as.numeric(cumsum(rnorm(length(Savings),
mean = new_monthly_income - new_monthly_expenses,
sd = 500)))
))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses),
))
new_monthly_expenses <- 1500
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses),
))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Savings = cumsum(Scenario1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Savings1 = cumsum(Scenario1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Points1 = rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)
Savings1 = cumsum(Scenario1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Points1 = rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500),
Savings1 = cumsum(Scenario1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Points1 = rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500),
Savings1 = cumsum(Scenario1),
Savings1.5 = cumsum(Points1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Savings1.5 = cumsum(Points1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Points1 = rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500),
Savings1 = cumsum(Scenario1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = sum(Savings1, Theory_Savings))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = cumsum(Savings1, Theory_Savings))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1)
new_monthly_expenses <- 200
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1)
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
ggplot(., aes(Date, Total_Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = as.Date("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# The original data inputs:
# savings <- monthly_savings(input$monthly_income, input$expenses)
# # create df from init_savings, savings, start_date, and end_date
# df <- create_savingsdf(init_savings = input$init_savings,
#                        savings,
#                        start_date = input$dates[1],
#                        end_date = input$dates[2])
# Recreate monthly savings given some number
start_date <- as.Date("2022-09-15")
end_date <- as.Date("2025-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
calculate_savings(current_savings, savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
df$Points <- rnorm(length(df$Savings), mean = monthly_income - monthly_expenses, sd = 3000) # Insert realistic standard deviation
df <- df %>% mutate(Theory_Savings = cumsum(Points))
# Visualizing
ggplot(df, aes(Date, Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = as.Date("2024-01-01")) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
ggplot(., aes(Date, Total_Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = goal_purchase_date) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
# Scenarios
# in each scenario we want to change the amount of savings that gets accrued starting at a given time
# inputs: start time of new job, new monthly income, new monthly expenses?
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 0
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
ggplot(., aes(Date, Total_Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = goal_purchase_date) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1)
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
filter(Date >= as.Date("2023-09-01"))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
filter(Date >= as.Date("2023-09-01")) %>% View()
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
filter(Date >= as.Date("2022-09-01")) %>% View()
# Scenarios
# in each scenario we want to change the amount of savings that gets accrued starting at a given time
# inputs: start time of new job, new monthly income, new monthly expenses?
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 1
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ as.numeric(cumsum(rnorm(length(Savings),
mean = new_monthly_income - new_monthly_expenses,
sd = 500)))
))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Points1 = rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500),
Savings1 = cumsum(Scenario1),
Savings1.5 = cumsum(Points1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
ggplot(., aes(Date, Total_Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = goal_purchase_date) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
filter(Date >= as.Date("2022-09-01")) %>% View()
