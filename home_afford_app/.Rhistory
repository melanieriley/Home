Date >= new_date ~ (new_monthly_income - new_monthly_expenses)),
Points1 = rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500),
Savings1 = cumsum(Scenario1),
Savings1.5 = cumsum(Points1))
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
ggplot(., aes(Date, Total_Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = goal_purchase_date) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
filter(Date >= as.Date("2022-09-01")) %>% View()
library(shiny); runApp('app5.R')
# Packages
library(shinydashboard)
library(shiny)
# library(remotes)
# remotes::install_github("rstudio/shinyuieditor")
library(gridlayout)
library(tidyverse)
library(lubridate)
library(scales)
library(flexdashboard)
library(shinythemes)
source("helper.R")
# --------- #
# Define UI #
# --------- #
header <- shinydashboard::dashboardHeader(title = "Home Savings")
sidebar <- shinydashboard::dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
)
body <- shinydashboard::dashboardBody(
tabItems(
tabItem(
tabName = "dashboard",
fluidRow(
box(
valueBoxOutput(outputId = "homePrice", width = 3),
valueBoxOutput(outputId = "downPayment", width = 3),
valueBoxOutput(outputId = "mortgageAmount", width = 3),
valueBoxOutput(outputId = "monthlyPayment", width = 3),
width = 12
)
),
fluidRow(
box(
title = "controls",
numericInput(
inputId = "init_savings",
label = "Current Savings",
value = 1000L
),
numericInput(
inputId = "monthly_income",
label = "Monthly Income (net)",
value = 4290L
),
numericInput(
inputId = "expenses",
label = "Monthly Expenses",
value = 3241L
),
dateRangeInput(
inputId = "dates",
label = "Date Range",
format = "mm-dd-yyyy",
start = "2022-01-01",
end = "2028-01-01"
),
numericInput(
inputId = "yearly_income",
label = "Yearly Income (gross)",
value = 60000L
),
sliderInput(
inputId = "percent",
label = "Down Payment %",
min = 0L,
max = 100L,
value = 20L,
width = "100%"
),
numericInput(
inputId = "term",
label = "Loan Term (years)",
value = 30L
),
numericInput(
inputId = "rate",
label = "Interest Rate (%)",
value = 4L
),
width = 3),
box(plotOutput(outputId = "linePlot",
height = 650), width = 9),
)
),
tabItem(
tabName = "widgets",
h2("Tab for Widgets")
)
)
)
ui <- shinydashboard::dashboardPage(header = header, sidebar = sidebar, body = body,
skin = c("black"))
# ------------------- #
# Define Server Logic #
# ------------------- #
server <- function(input, output, session) {
output$linePlot <- renderPlot({
# calculate savings from income and expenses
savings <- monthly_savings(input$monthly_income, input$expenses)
# create df from init_savings, savings, start_date, and end_date
df <- create_savingsdf(init_savings = input$init_savings,
savings,
start_date = input$dates[1],
end_date = input$dates[2])
# plot savings over date range
ggplot(df, aes(x = Date, y = Savings, group = 1)) +
geom_line(size = 2) +
scale_x_date(date_labels = "%b-%Y") +
scale_y_continuous(labels=scales::dollar_format()) +
theme_minimal()
})
output$homePrice <- renderValueBox({
loan <- calculate_loan(input$yearly_income, input$rate, input$term)
home_price <- calculate_home_price(loan)
valueBox(
paste(scales::dollar(home_price, largest_with_cents = 100)),
subtitle = "Home Price",
color = "blue"
)
})
output$downPayment <- renderValueBox({
loan <- calculate_loan(input$yearly_income, input$rate, input$term)
down_payment <- down_payment(loan, input$percent)
valueBox(
scales::dollar(down_payment),
subtitle = "Down Payment",
color = "yellow"
)
})
output$mortgageAmount <- renderValueBox({
loan <- calculate_loan(input$yearly_income, input$rate, input$term)
valueBox(
scales::dollar(loan),
subtitle = "Mortage Amount",
color = "orange"
)
})
output$monthlyPayment <- renderValueBox({
mortgage <- mortgage_payment(input$yearly_income)
valueBox(
scales::dollar(mortgage),
subtitle = "Monthly Payment",
color = "aqua"
)
})
}
shinyApp(ui, server)
# Packages
library(shinydashboard)
library(shiny)
# library(remotes)
# remotes::install_github("rstudio/shinyuieditor")
library(gridlayout)
library(tidyverse)
library(lubridate)
library(scales)
library(flexdashboard)
library(shinythemes)
source("helper.R")
# --------- #
# Define UI #
# --------- #
header <- shinydashboard::dashboardHeader(title = "Home Savings")
sidebar <- shinydashboard::dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
)
runApp('app5.R')
runApp('app5.R')
runApp('app5.R')
runApp('app5.R')
runApp('app5.R')
runApp('app5.R')
# Line Plot
# Using simulated data
library(dplyr)
library(ggplot2)
library(lubridate)
# setwd("C:/Users/Zachary.Palmore/GitHub/Home/home_afford_app")
source("helper.R")
setwd("C:/Users/Zachary.Palmore/GitHub/Home/home_afford_app")
source("helper.R")
# Packages
library(dplyr)
library(ggplot2)
library(lubridate)
# Starting data
start_date <- as.Date("2022-09-15")
end_date <- as.Date("2025-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
df$Points <- rnorm(length(df$Savings), mean = monthly_income - monthly_expenses, sd = 3000) # Insert realistic standard deviation
df <- df %>% mutate(Theory_Savings = cumsum(Points))
# New data
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 1
# The original data inputs:
# savings <- monthly_savings(input$monthly_income, input$expenses)
# # create df from init_savings, savings, start_date, and end_date
# df <- create_savingsdf(init_savings = input$init_savings,
#                        savings,
#                        start_date = input$dates[1],
#                        end_date = input$dates[2])
# Recreate monthly savings given some number
start_date <- as.Date("2022-09-15")
end_date <- as.Date("2026-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
View(df)
# New data
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 1
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>%
ggplot(., aes(Date, Total_Theory_Savings)) +
geom_smooth(method = "lm") +
geom_point() + geom_line(aes(Date, Savings)) +
geom_hline(yintercept = dp, lty = 3) +
geom_hline(yintercept = current_savings, lty = 3) +
geom_vline(xintercept = goal_purchase_date) +
scale_x_date(date_labels = "%b-%Y", breaks = goal_purchase_date) +
scale_y_continuous(labels=scales::dollar_format(),
breaks = c(10000, 80000)) +
theme_classic()
View(df)
# Packages
library(dplyr)
library(ggplot2)
library(lubridate)
# setwd("C:/Users/Zachary.Palmore/GitHub/Home/home_afford_app")
source("helper.R")
# Starting data
start_date <- as.Date("2022-09-15")
end_date <- as.Date("2025-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
View(df)
end_date <- as.Date("2023-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
# Starting data
start_date <- as.Date("2022-09-15")
end_date <- as.Date("2023-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
df$Points <- rnorm(length(df$Savings), mean = monthly_income - monthly_expenses, sd = 3000) # Insert realistic standard deviation
df <- df %>% mutate(Theory_Savings = cumsum(Points))
View(df)
# New data
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 1
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1)
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>% View()
df
df[c(1,2),]
df[c(1,2)]
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date > new_date ~ as.numeric(0),
Date >= new_date ~ new_monthly_income - new_monthly_expenses
))
# New data
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 1
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>% View()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ new_monthly_income - new_monthly_expenses
))
new_monthly_expenses <- 0
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ new_monthly_income - new_monthly_expenses
))
new_monthly_expenses <- 5
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>% View()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ new_monthly_income - new_monthly_expenses
))
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses) + Savings
))
Date < new_date ~ as.numeric(Savings),
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(Savings),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses) + Savings
))
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ cumsum((new_monthly_income - new_monthly_expenses) + Savings)
))
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ cumsum((new_monthly_income - new_monthly_expenses))
))
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
), cumsum(Scenario))
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
), new_savings = cumsum(Scenario))
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings)
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings) %>%
ggplot(aes(Date, total_saved)) + geom_line()
# Starting data
start_date <- as.Date("2020-09-15")
end_date <- as.Date("2023-12-31")
goal_purchase_date <- as.Date("2023-10-01")
monthly_income <-  4000
monthly_expenses <- 2800
current_savings <- 24000
dp <- down_payment(calculate_loan(monthly_income * 12, .04, 30), 20)
# seq(from = start_date, to = end_date, by = )
df <- ""
df$date <- seq.Date(from = start_date, to = end_date, by = 1)
df <- create_savingsdf(init_savings = current_savings,
savings = monthly_income - monthly_expenses,
start_date = start_date, end_date = end_date)
df$Points <- rnorm(length(df$Savings), mean = monthly_income - monthly_expenses, sd = 3000) # Insert realistic standard deviation
df <- df %>% mutate(Theory_Savings = cumsum(Points))
# New data
new_date <- as.Date("2022-10-01")
new_monthly_income <- 4700
new_monthly_expenses <- 5
df %>%
mutate(Scenario1 = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ rnorm(length(Savings), mean = new_monthly_income - new_monthly_expenses,
sd = 500)),
Savings1 = cumsum(Scenario1),
Total_Theory_Savings = Theory_Savings + Savings1) %>% View()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings) %>%
ggplot(aes(Date, total_saved)) + geom_line()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings) %>%
ggplot(aes(Date, total_saved)) + geom_line() + geom_point()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings) %>%
ggplot(aes(Date, total_saved, color = Scenario)) +
geom_line() + geom_point()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings) %>%
ggplot(aes(Date, total_saved, color = Scenario)) +
geom_line() + geom_point()
df[c(1,2)] %>%
mutate(Scenario = case_when(
Date < new_date ~ as.numeric(0),
Date >= new_date ~ (new_monthly_income - new_monthly_expenses)
),
new_savings = cumsum(Scenario),
total_saved = new_savings + Savings) %>% View()
